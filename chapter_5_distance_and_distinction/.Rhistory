mutate(tf_idf = round(as.numeric(tf_idf), 6)) %>%
kable(format = "latex", booktabs = TRUE,
caption = "Some Lewis Carroll Words", escape = TRUE) %>%
kable_styling(latex_options = c("hold_position")) %>%
as.character()
glue(
"\\begin{{minipage}}[t]{{0.48\\textwidth}}
{left_tab}
\\end{{minipage}}\\hfill
\\begin{{minipage}}[t]{{0.48\\textwidth}}
{right_tab}
\\end{{minipage}}"
) %>%
knitr::asis_output()
# (REPLACES YOUR BLOCK) — tidyverse + gt, PDF-safe two-column layout
library(dplyr)
library(purrr)
library(gt)
library(glue)
library(knitr)
library(kableExtra)  # not strictly required, but often loaded elsewhere
# 1) Make a LaTeX-friendly gt table (no HTML/md in headers)
make_gt_table <- function(df) {
df %>%
select(word, tf_idf) %>%
gt() %>%
tab_header(
title = "Top TF-IDF Words",
subtitle = paste0("Decade: ", unique(df$decade))
) %>%
cols_label(
word = "Word",
tf_idf = "TF-IDF Score"
) %>%
fmt_number(columns = tf_idf, decimals = 6, use_seps = FALSE)
}
# 2) Build one gt table per decade
gt_tables <- top_hansard_tf_idf %>%
group_by(decade) %>%
group_split() %>%
map(make_gt_table)
knitr::opts_chunk$set(echo = TRUE)
# URLs for plain text versions
looking_glass_url <- "https://www.gutenberg.org/files/12/12-0.txt"
peter_url <- "https://www.gutenberg.org/cache/epub/14838/pg14838.txt"
# Download and save Alice's Adventures in Wonderland
looking_glass_text <- readLines(looking_glass_url, encoding = "UTF-8", warn = FALSE)
# Download and save The Tale of Peter Rabbit
peter_text <- readLines(peter_url, encoding = "UTF-8", warn = FALSE)
print("Texts downloaded successfully.")
# Load required libraries
library(tidyverse)
library(tidytext)
# Convert to data frames
looking_glass_df <- tibble(writer = "Lewis Carroll", text = looking_glass_text)
peter_df <- tibble(writer = "Beatrix Potter", text = peter_text)
# Combine both texts
books <- bind_rows(looking_glass_df, peter_df)
# Tokenize: split into individual words
tokens <- books %>%
unnest_tokens(word, text) %>%
filter(str_detect(word, "^[a-z']+$"))  # keep only alphabetic words
# Calculate word frequencies per author
word_counts <- tokens %>%
count(writer, word) %>%
pivot_wider(names_from = word, values_from = n, values_fill = 0)
# Focus on selected words of interest
target_words <- c("rabbit", "she", "little", "chortled", "shed", "the", "hoe", "slithy", "galumph")
selected <- word_counts %>%
select(writer, any_of(target_words))
# View the table
print(selected)
# Count word frequencies per author (long format)
word_counts2 <- tokens %>%
count(writer, word, sort = TRUE) %>%
rename(document = writer, term = word)
# Compute tf-idf values
tfidf_table <- word_counts2 %>%
bind_tf_idf(term = term, document = document, n = n)
# View top distinctive words for each author
filtered_tfidf <- tfidf_table %>%
filter(term %in% target_words) %>%
arrange(document, desc(tf_idf)) %>%
select(term, tf_idf)
# (REPLACES L103–L128) — tidyverse conventions, LaTeX/PDF-safe
library(dplyr)
library(knitr)
library(kableExtra)
library(purrr)
library(glue)
left_tab <- filtered_tfidf %>%
slice(1:6) %>%
mutate(tf_idf = round(as.numeric(tf_idf), 6)) %>%
kable(format = "latex", booktabs = TRUE,
caption = "Some Beatrix Potter Words", escape = TRUE) %>%
kable_styling(latex_options = c("hold_position")) %>%
as.character()
right_tab <- filtered_tfidf %>%
slice(7:12) %>%
mutate(tf_idf = round(as.numeric(tf_idf), 6)) %>%
kable(format = "latex", booktabs = TRUE,
caption = "Some Lewis Carroll Words", escape = TRUE) %>%
kable_styling(latex_options = c("hold_position")) %>%
as.character()
glue(
"\\begin{{minipage}}[t]{{0.48\\textwidth}}
{left_tab}
\\end{{minipage}}\\hfill
\\begin{{minipage}}[t]{{0.48\\textwidth}}
{right_tab}
\\end{{minipage}}"
) %>%
knitr::asis_output()
distinctively_carroll <- tfidf_table %>%
filter(document == "Lewis Carroll") %>%
arrange(desc(tf_idf)) %>%
select(term, tf_idf)
kable(head(distinctively_carroll, 15),
format = "html",
caption = "<span style='font-size:14pt; font-weight:bold;'>Lewis Carroll's Most Distinctive Words (when Alice is Compared with Peter Rabbit)</span>",
escape = FALSE) %>%
kable_styling(full_width = TRUE)
install.packages("text2vec")  # Run this if not already installed
library(text2vec)             # Load the package
# define a function for jsd
jsd <- function(p, q) {
# Ensure p and q are probability distributions
p <- p / sum(p)
q <- q / sum(q)
m <- 0.5 * (p + q)
# Define a helper function for KL divergence
kl_div <- function(a, b) {
a <- ifelse(a == 0, 1, a)  # Avoid log(0)
b <- ifelse(b == 0, 1, b)
sum(a * log2(a / b))
}
0.5 * kl_div(p, m) + 0.5 * kl_div(q, m)
}
# load Alice in Wonderland
alice_url <- "https://www.gutenberg.org/files/11/11-0.txt"
alice_text <- readLines(alice_url, encoding = "UTF-8", warn = FALSE)
# Combine into one data frame
books <- bind_rows(
tibble(booktitle = "Alice", text = alice_text),
tibble(booktitle = "Peter", text = peter_text),
tibble(booktitle = "LookingGlass", text = looking_glass_text)
)
# Tokenise and count
word_freqs <- books %>%
unnest_tokens(word, text) %>%
filter(str_detect(word, "^[a-z']+$")) %>%
count(booktitle, word) %>%
group_by(booktitle) %>%
mutate(freq = n / sum(n)) %>%
ungroup()
# Create a frequency matrix (book x word)
freq_matrix <- word_freqs %>%
select(booktitle, word, freq) %>%
pivot_wider(names_from = word, values_from = freq, values_fill = 0) %>%
column_to_rownames("booktitle") %>%
as.matrix()
# Compute JSD for each pair of books
book_names <- rownames(freq_matrix)
n_books <- nrow(freq_matrix)
jsd_matrix <- matrix(0, n_books, n_books)
rownames(jsd_matrix) <- book_names
colnames(jsd_matrix) <- book_names
for (i in 1:n_books) {
for (j in 1:n_books) {
jsd_matrix[i, j] <- jsd(freq_matrix[i, ], freq_matrix[j, ])
}
}
# View results
kable(jsd_matrix)
# Load our needed R packages
library(hansardr)
library(tidyverse)
library(lubridate)
library(tidytext)
library(gt)
# Load tidytext's built-in list of stop words for filtering out common words
data("stop_words")
# Load the Hansard debates from the 1830s and 1860s
data("hansard_1830")
data("hansard_1860")
# Add a 'decade' column to hansard_1830 to tag all rows with the value 1830
hansard_1830 <- hansard_1830 %>%
mutate(decade = 1830)
# Add a 'decade' column to hansard_1860 to tag all rows with the value 1860
hansard_1860 <- hansard_1860 %>%
mutate(decade = 1860)
install.packages("text2vec")
knitr::opts_chunk$set(echo = TRUE)
# URLs for plain text versions
looking_glass_url <- "https://www.gutenberg.org/files/12/12-0.txt"
peter_url <- "https://www.gutenberg.org/cache/epub/14838/pg14838.txt"
# Download and save Alice's Adventures in Wonderland
looking_glass_text <- readLines(looking_glass_url, encoding = "UTF-8", warn = FALSE)
# Download and save The Tale of Peter Rabbit
peter_text <- readLines(peter_url, encoding = "UTF-8", warn = FALSE)
print("Texts downloaded successfully.")
# URLs for plain text versions
looking_glass_url <- "https://www.gutenberg.org/files/12/12-0.txt"
peter_url <- "https://www.gutenberg.org/cache/epub/14838/pg14838.txt"
# Extract "Through the Looking-Glass" and save it to RStudio's global environment
looking_glass_text <- readLines(looking_glass_url, encoding = "UTF-8", warn = FALSE)
# Extract "The Tale of Peter Rabbit" and save it to RStudio's global environment
peter_text <- readLines(peter_url, encoding = "UTF-8", warn = FALSE)
knitr::opts_chunk$set(echo = TRUE)
# URLs for plain text versions
looking_glass_url <- "https://www.gutenberg.org/files/12/12-0.txt"
peter_url <- "https://www.gutenberg.org/cache/epub/14838/pg14838.txt"
# Extract "Through the Looking-Glass" and save it to RStudio's global environment
looking_glass_text <- readLines(looking_glass_url, encoding = "UTF-8", warn = FALSE)
# Extract "The Tale of Peter Rabbit" and save it to RStudio's global environment
peter_text <- readLines(peter_url, encoding = "UTF-8", warn = FALSE)
# Load required libraries
library(tidyverse)
library(tidytext)
# Convert to data frames
looking_glass_df <- tibble(writer = "Lewis Carroll", text = looking_glass_text)
peter_df <- tibble(writer = "Beatrix Potter", text = peter_text)
# Combine both texts
books <- bind_rows(looking_glass_df, peter_df)
# Tokenize: split into individual words
tokens <- books %>%
unnest_tokens(word, text) %>%
filter(str_detect(word, "^[a-z']+$"))  # keep only alphabetic words
# Calculate word frequencies per author
word_counts <- tokens %>%
count(writer, word) %>%
pivot_wider(names_from = word, values_from = n, values_fill = 0)
# Focus on selected words of interest
target_words <- c("rabbit", "she", "little", "chortled", "shed", "the", "hoe", "slithy", "galumph")
selected <- word_counts %>%
select(writer, any_of(target_words))
# View the table
print(selected)
# Load required libraries
library(tidyverse)
library(tidytext)
# Convert to data frames
looking_glass_df <- tibble(writer = "Lewis Carroll", text = looking_glass_text)
peter_df <- tibble(writer = "Beatrix Potter", text = peter_text)
# Combine both texts
books <- bind_rows(looking_glass_df, peter_df)
# Tokenize text by spliting it into individual words
tokens <- books %>%
unnest_tokens(word, text) %>%
filter(str_detect(word, "^[a-z']+$"))  # keep only alphabetic words
# Calculate word frequencies per author
word_counts <- tokens %>%
count(writer, word) %>%
pivot_wider(names_from = word, values_from = n, values_fill = 0)
# Focus on selected words of interest
target_words <- c("rabbit", "she", "little", "chortled", "shed", "the", "hoe", "slithy", "galumph")
selected <- word_counts %>%
select(writer, any_of(target_words))
# View the table
print(selected)
knitr::opts_chunk$set(echo = TRUE)
# URLs for plain text versions
looking_glass_url <- "https://www.gutenberg.org/files/12/12-0.txt"
peter_url <- "https://www.gutenberg.org/cache/epub/14838/pg14838.txt"
# Extract "Through the Looking-Glass" and save it to RStudio's global environment
looking_glass_text <- readLines(looking_glass_url, encoding = "UTF-8", warn = FALSE)
# Extract "The Tale of Peter Rabbit" and save it to RStudio's global environment
peter_text <- readLines(peter_url, encoding = "UTF-8", warn = FALSE)
# Load required libraries
library(tidyverse)
library(tidytext)
# Convert to data frames
looking_glass_df <- tibble(writer = "Lewis Carroll", text = looking_glass_text)
peter_df <- tibble(writer = "Beatrix Potter", text = peter_text)
# Combine both texts
books <- bind_rows(looking_glass_df, peter_df)
# Tokenize text by spliting it into individual words
tokens <- books %>%
unnest_tokens(word, text) %>%
filter(str_detect(word, "^[a-z']+$"))  # keep only alphabetic words
# Calculate word frequencies per author
word_counts <- tokens %>%
count(writer, word) %>%
pivot_wider(names_from = word, values_from = n, values_fill = 0)
# Focus on selected words of interest
target_words <- c("rabbit", "she", "little", "chortled", "shed", "the", "hoe", "slithy", "galumph")
selected <- word_counts %>%
select(writer, any_of(target_words))
# View the table
print(selected)
# Count word frequencies per author (long format)
word_counts2 <- tokens %>%
count(writer, word, sort = TRUE) %>%
rename(document = writer, term = word)
# Compute tf-idf values
tfidf_table <- word_counts2 %>%
bind_tf_idf(term = term, document = document, n = n)
# View top distinctive words for each author
filtered_tfidf <- tfidf_table %>%
filter(term %in% target_words) %>%
arrange(document, desc(tf_idf)) %>%
select(term, tf_idf)
# (REPLACES L103–L128) — tidyverse conventions, LaTeX/PDF-safe
library(knitr)
library(kableExtra)
library(glue)
left_tab <- filtered_tfidf %>%
slice(1:6) %>%
mutate(tf_idf = round(as.numeric(tf_idf), 6)) %>%
kable(format = "latex", booktabs = TRUE,
caption = "Some Beatrix Potter Words", escape = TRUE) %>%
kable_styling(latex_options = c("hold_position")) %>%
as.character()
right_tab <- filtered_tfidf %>%
slice(7:12) %>%
mutate(tf_idf = round(as.numeric(tf_idf), 6)) %>%
kable(format = "latex", booktabs = TRUE,
caption = "Some Lewis Carroll Words", escape = TRUE) %>%
kable_styling(latex_options = c("hold_position")) %>%
as.character()
glue(
"\\begin{{minipage}}[t]{{0.48\\textwidth}}
{left_tab}
\\end{{minipage}}\\hfill
\\begin{{minipage}}[t]{{0.48\\textwidth}}
{right_tab}
\\end{{minipage}}"
) %>%
knitr::asis_output()
library(knitr)
library(kableExtra)
make_tab <- function(df, caption) {
df %>%
mutate(tf_idf = round(as.numeric(tf_idf), 6)) %>%
kable(format = "latex", booktabs = TRUE, caption = caption, escape = TRUE) %>%
kable_styling(latex_options = "hold_position") %>%
as.character()
}
left_tab  <- make_tab(filtered_tfidf[1:6, ],  "Some Beatrix Potter Words")
right_tab <- make_tab(filtered_tfidf[7:12, ], "Some Lewis Carroll Words")
output <- paste0(
"\\begin{minipage}[t]{0.48\\textwidth}
", left_tab, "
\\end{minipage}\\hfill
\\begin{minipage}[t]{0.48\\textwidth}
", right_tab, "
\\end{minipage}"
)
knitr::asis_output(output)
library(knitr)
library(kableExtra)
make_tab <- function(df, caption) {
df %>%
mutate(tf_idf = round(as.numeric(tf_idf), 6)) %>%
kable(format = "latex", booktabs = TRUE, caption = caption, escape = TRUE) %>%
kable_styling(latex_options = "hold_position") %>%
as.character() }
left_tab  <- make_tab(filtered_tfidf[1:6, ],  "Some Beatrix Potter Words")
right_tab <- make_tab(filtered_tfidf[7:12, ], "Some Lewis Carroll Words")
output <- paste0(
"\\begin{minipage}[t]{0.48\\textwidth}",
left_tab, "
\\end{minipage}\\hfill
\\begin{minipage}[t]{0.48\\textwidth}",
right_tab, "
\\end{minipage}")
asis_output(output)
library(knitr)
library(kableExtra)
make_tab <- function(df, caption) {
df %>%
mutate(tf_idf = round(as.numeric(tf_idf), 6)) %>%
kable(format = "latex", booktabs = TRUE, caption = caption, escape = TRUE) %>%
kable_styling(latex_options = "hold_position") %>%
as.character() }
left_tab  <- make_tab(filtered_tfidf[1:6, ],  "Some Beatrix Potter Words")
right_tab <- make_tab(filtered_tfidf[7:12, ], "Some Lewis Carroll Words")
two_pane_table <- paste0(
"\\begin{minipage}[t]{0.48\\textwidth}",
left_tab, "
\\end{minipage}\\hfill
\\begin{minipage}[t]{0.48\\textwidth}",
right_tab, "
\\end{minipage}")
asis_output(two_pane_table)
distinctively_carroll <- tfidf_table %>%
filter(document == "Lewis Carroll") %>%
arrange(desc(tf_idf)) %>%
select(term, tf_idf)
kable(head(distinctively_carroll, 15),
format = "html",
caption = "<span style='font-size:14pt; font-weight:bold;'>Lewis Carroll's Most Distinctive Words (when Alice is Compared with Peter Rabbit)</span>",
escape = FALSE) %>%
kable_styling(full_width = TRUE)
distinctively_carroll <- tfidf_table %>%
filter(document == "Lewis Carroll") %>%
arrange(desc(tf_idf)) %>%
select(term, tf_idf)
kable(
head(distinctively_carroll, 15),
format   = "latex",
booktabs = TRUE,
caption  = "\\textbf{\\large Lewis Carroll's Most Distinctive Words (when \\textit{Alice} is Compared with \\textit{Peter Rabbit})}",
escape   = FALSE) %>%
kable_styling(full_width = TRUE)
source("~/test.R")
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(dplyr)
make_tab_plain <- function(df) {
df %>%
mutate(tf_idf = round(as.numeric(tf_idf), 6)) %>%
knitr::kable(format = "latex", booktabs = TRUE, caption = NULL,
col.names = c("Word", "TF-IDF")) %>%
as.character()
}
left_tab  <- make_tab_plain(filtered_tfidf[1:6, ])
right_tab <- make_tab_plain(filtered_tfidf[7:12, ])
two_pane_table <- paste0(
"\\noindent
\\begin{minipage}[t]{0.48\\textwidth}
\\raggedright\\textbf{Some Beatrix Potter Words}\\\\[3pt]
", left_tab, "
\\end{minipage}\\hfill
\\begin{minipage}[t]{0.48\\textwidth}
\\raggedright\\textbf{Some Lewis Carroll Words}\\\\[3pt]
", right_tab, "
\\end{minipage}"
)
knitr::asis_output(two_pane_table)
library(knitr)
make_tab <- function(df) {
df %>%
mutate(tf_idf = round(as.numeric(tf_idf), 6)) %>%
kable(format = "latex", booktabs = TRUE, caption = NULL,
col.names = c("Word", "TF-IDF")) %>%
as.character() }
left_tab  <- make_tab(filtered_tfidf[1:6, ])
right_tab <- make_tab(filtered_tfidf[7:12, ])
two_pane_table <- paste0(
"\\noindent
\\begin{minipage}[t]{0.48\\textwidth}
\\raggedright\\textbf{Some Beatrix Potter Words}\\\\[3pt]",
left_tab, "
\\end{minipage}\\hfill
\\begin{minipage}[t]{0.48\\textwidth}
\\raggedright\\textbf{Some Lewis Carroll Words}\\\\[3pt]",
right_tab, "
\\end{minipage}")
asis_output(two_pane_table)
distinctively_carroll <- tfidf_table %>%
filter(document == "Lewis Carroll") %>%
arrange(desc(tf_idf)) %>%
select(term, tf_idf)
kable(head(distinctively_carroll, 15),
format = "latex",
booktabs = TRUE,
caption = "\\textbf{\\large Lewis Carroll's Most Distinctive Words (when \\textit{Alice} is Compared with \\textit{Peter Rabbit})}",
escape = FALSE) %>%
kable_styling(full_width = TRUE)
install.packages("text2vec")  # Run this if not already installed
library(text2vec)             # Load the package
# define a function for jsd
jsd <- function(p, q) {
# Ensure p and q are probability distributions
p <- p / sum(p)
q <- q / sum(q)
m <- 0.5 * (p + q)
# Define a helper function for KL divergence
kl_div <- function(a, b) {
a <- ifelse(a == 0, 1, a)  # Avoid log(0)
b <- ifelse(b == 0, 1, b)
sum(a * log2(a / b))
}
0.5 * kl_div(p, m) + 0.5 * kl_div(q, m)
}
# load Alice in Wonderland
alice_url <- "https://www.gutenberg.org/files/11/11-0.txt"
alice_text <- readLines(alice_url, encoding = "UTF-8", warn = FALSE)
# Combine into one data frame
books <- bind_rows(
tibble(booktitle = "Alice", text = alice_text),
tibble(booktitle = "Peter", text = peter_text),
tibble(booktitle = "LookingGlass", text = looking_glass_text)
)
# Tokenise and count
word_freqs <- books %>%
unnest_tokens(word, text) %>%
filter(str_detect(word, "^[a-z']+$")) %>%
count(booktitle, word) %>%
group_by(booktitle) %>%
mutate(freq = n / sum(n)) %>%
ungroup()
# Create a frequency matrix (book x word)
freq_matrix <- word_freqs %>%
select(booktitle, word, freq) %>%
pivot_wider(names_from = word, values_from = freq, values_fill = 0) %>%
column_to_rownames("booktitle") %>%
as.matrix()
# Compute JSD for each pair of books
book_names <- rownames(freq_matrix)
n_books <- nrow(freq_matrix)
jsd_matrix <- matrix(0, n_books, n_books)
rownames(jsd_matrix) <- book_names
colnames(jsd_matrix) <- book_names
for (i in 1:n_books) {
for (j in 1:n_books) {
jsd_matrix[i, j] <- jsd(freq_matrix[i, ], freq_matrix[j, ])
}
}
# View results
kable(jsd_matrix)
